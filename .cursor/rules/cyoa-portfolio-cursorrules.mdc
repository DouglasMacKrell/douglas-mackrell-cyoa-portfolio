---
description: 
globs: 
alwaysApply: true
---
# 🧭 Cursorrules

### 🔄 Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before starting a new task. If the task isn’t listed, add it with a brief description and today’s date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

---

### 🧱 Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- Follow **file-based routing** conventions in Next.js.
- Group components by domain or feature inside `/components`, `/features`, or `/modules`.
- **Use clear, consistent imports** (prefer relative imports within packages).
- Always adhere to Test Driven Development

---

### 🎨 Frontend Style & UI
- Use **Tailwind CSS** for utility-first styling.
- Use **Styled Components** when component-level scoping or dynamic styling is needed.
- Manage variants with **class-variance-authority (CVA)**.
- Handle conditional classes using **clsx** and merge with **tailwind-merge** to avoid conflicts.
- Use **Lucide React** for icons.
- Prefer reusable, typed components with consistent props and variant patterns.

---

### 🧪 Testing & Reliability
- Use **Jest** and **React Testing Library** for all frontend and logic testing.
- Place tests in either a colocated `__tests__` folder or a mirrored `/tests` structure.
- Every new component, hook, or utility should include at least:
  - ✅ One test for expected use
  - ⚠️ One test for edge cases
  - ❌ One test for failure behavior
- **Update or remove outdated tests** when updating logic.

---

### ✅ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a “Discovered During Work” section.

---

### 📎 Style & Conventions
- Use **TypeScript** for all code, with strict typing for props, function arguments, and return types.
- Follow best practices from the **Next.js**, **React**, and **TypeScript** ecosystems.
- Use `tsx` for all React components.
- Document non-obvious logic with inline comments.
- For complex logic, include inline `// Reason:` comments that explain the *why*, not just the *what*.

---

### 📚 Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- Add comments to clarify unusual decisions or tricky code sections.
- Keep documentation up to date and written for a mid-level developer audience.

---

### 🧠 AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** – only use known, verified packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.

